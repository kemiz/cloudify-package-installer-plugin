##################################################################################
# Cloudify Package Installer Plugin Types
# Author: kemi
##################################################################################
tosca_definitions_version: cloudify_dsl_1_1

plugins:
  package_installer:
    executor: host_agent
    source: https://github.com/kemiz/cloudify-package-installer-plugin/archive/master.zip

workflows:

  ##################################################################################
  # Package workflows
  # Install, remove & update packages on Ubuntu or CentOS systems
  ##################################################################################

    install_packages:
        mapping: package_installer.package_installer_plugin.tasks.install_packages
        parameters:
            package_list:
              description: >
                Provide a list of RPM or DEB file URLs to install
            node_id:
              description: >
                The node id to execute workflow on

    remove_packages:
        mapping: package_installer.package_installer_plugin.tasks.remove_packages
        parameters:
            package_list:
              description: >
                Provide a list of RPM or DEB file URLs to uninstall
            node_id:
              description: >
                The node id to execute workflow on

    reinstall_packages:
        mapping: package_installer.package_installer_plugin.tasks.reinstall_packages
        parameters:
            package_list:
              description: >
                Provide a list of RPM or DEB file URLs to reinstall
            node_id:
              description: >
                The node id to execute workflow on

    upgrade_packages:
        mapping: package_installer.package_installer_plugin.tasks.reinstall_packages
        parameters:
            package_list:
              description: >
                Provide a list of RPM or DEB file URLs to reinstall
            node_id:
              description: >
                The node id to execute workflow on

  ##################################################################################
  # Service workflows
  # Start, stop & restart installed services on Ubuntu or CentOS systems
  ##################################################################################

    start_service:
        mapping: package_installer.package_installer_plugin.service_tasks.start_service
        parameters:
            service_name:
              description: >
                Name of the service to start
            node_id:
              description: >
                The node id to execute workflow on

    stop_service:
        mapping: package_installer.package_installer_plugin.service_tasks.stop_service
        parameters:
            service_name:
              description: >
                Name of the service to stop
            node_id:
              description: >
                The node id to execute workflow on

    restart_service:
        mapping: package_installer.package_installer_plugin.service_tasks.restart_service
        parameters:
            service_name:
              default: { get_property: [ cloudify.nodes.ServiceInstaller, config,  service_name ] }
              description: >
                Name of the service to restart
            node_id:
              description: >
                The node id to execute workflow on


node_types:

  ##################################################################################
  # Service Installer Type
  # Extends the PackageInstaller type and adds capabilities to control a service.
  # A list of packages can be supplied which will be installed in sequential order.
  # The implementation uses: "sudo service <service_name> start / stop / restart"
  # to control the service operation
  ##################################################################################

  cloudify.nodes.PackageInstaller:
    derived_from: cloudify.nodes.SoftwareComponent
    properties:
      service_name:
        default: 'PackageInstaller_Node'
      version:
        default: 1
      config:
        default: None
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: package_installer.package_installer_plugin.tasks.install_packages
          inputs:
            config:
              default: { get_property: [ SELF, config ] }

      ##################################################################################
      # Package Command mappings
      ##################################################################################

      package.commands:
        install_packages:
          implementation: package_installer.package_installer_plugin.tasks.install_packages
        remove_packages:
          implementation: package_installer.package_installer_plugin.tasks.remove_packages
        reinstall_packages:
          implementation: package_installer.package_installer_plugin.tasks.reinstall_packages


  ##################################################################################
  # Service Installer Type
  # Extends the PackageInstaller type and adds capabilities to control a service.
  # A list of packages can be supplied which will be installed in sequential order.
  # The implementation uses: "sudo service <service_name> start / stop / restart"
  # to control the service operation
  ##################################################################################

  cloudify.nodes.ServiceInstaller:
    derived_from: cloudify.nodes.PackageInstaller
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          implementation: package_installer.package_installer_plugin.service_tasks.start_service
          inputs:
            service_name:
              default: { get_property: [ SELF, service_name ] }
            custom_command:
              default: None
        stop:
          implementation: package_installer.package_installer_plugin.service_tasks.stop_service
          inputs:
            service_name:
              default: { get_property: [ SELF, service_name ] }
            custom_command:
              default: None
      ##################################################################################
      # Service Command mappings
      ##################################################################################

      service.commands:
        start_service:
          implementation: package_installer.package_installer_plugin.service_tasks.start_service
          inputs:
            service_name:
              default: { get_property: [ SELF, service_name ] }
            custom_command:
              default: None
        stop_service:
          implementation: package_installer.package_installer_plugin.service_tasks.stop_service
          inputs:
            service_name:
              default: { get_property: [ SELF, service_name ] }
            custom_command:
              default: None
        restart_service:
          implementation: package_installer.package_installer_plugin.service_tasks.restart_service
          inputs:
            service_name:
              default: { get_property: [ SELF, service_name ] }
            custom_command:
              default: None

  ##################################################################################
  # Configuration Type
  ##################################################################################
  configuration:
    derived_from: cloudify.nodes.Root
    properties:
      config: {}


relationships:
  service.contained_in:
    derived_from: cloudify.relationships.contained_in
    properties:
      service_name:
        default: 'service'
    target_interfaces:
      cloudify.interfaces.relationship_lifecycle:
        postconfigure:
          implementation: package_installer.package_installer_plugin.service_relationships.contained_in
          inputs:
            service_name:
              default: { get_property: [ SELF,  service_name ] }
              description: >
                Name of the service to stop