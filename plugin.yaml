##################################################################################
# Cloudify Package Installer Plugin.
# Author: kemi
##################################################################################

plugins:
  package_installer:
    executor: host_agent
    source: https://github.com/kemiz/cloudify-package-installer-plugin/archive/master.zip

workflows:

  ##################################################################################
  # Package workflows
  # Install, remove & update packages on Ubuntu or CentOS systems
  ##################################################################################

    install_packages:
        mapping: package_installer.package_installer_plugin.tasks.install_packages
        parameters:
            package_list:
              description: >
                Provide a list of RPM or DEB file URLs to install
            node_id:
              description: >
                The node id to execute workflow on

    remove_packages:
        mapping: package_installer.package_installer_plugin.tasks.remove_packages
        parameters:
            package_list:
              description: >
                Provide a list of RPM or DEB file URLs to uninstall
            node_id:
              description: >
                The node id to execute workflow on

    reinstall_packages:
        mapping: package_installer.package_installer_plugin.tasks.reinstall_packages
        parameters:
            package_list:
              description: >
                Provide a list of RPM or DEB file URLs to reinstall
            node_id:
              description: >
                The node id to execute workflow on

    upgrade_packages:
        mapping: package_installer.package_installer_plugin.tasks.reinstall_packages
        parameters:
            package_list:
              description: >
                Provide a list of RPM or DEB file URLs to reinstall
            node_id:
              description: >
                The node id to execute workflow on

  ##################################################################################
  # Service workflows
  # Start, stop & restart installed services on Ubuntu or CentOS systems
  ##################################################################################

    start_service:
        mapping: package_installer.package_installer_plugin.service_tasks.start_service
        parameters:
            service_name:
              default: { get_property: [ cloudify.nodes.ServiceInstaller,  config, service_name ] }
              description: >
                Name of the service to start
            node_id:
              description: >
                The node id to execute workflow on

    stop_service:
        mapping: package_installer.package_installer_plugin.service_tasks.stop_service
        parameters:
            service_name:
              default: { get_property: [ cloudify.nodes.ServiceInstaller,  config, service_name ] }
              description: >
                Name of the service to stop
            node_id:
              description: >
                The node id to execute workflow on

    restart_service:
        mapping: package_installer.package_installer_plugin.service_tasks.restart_service
        parameters:
            service_name:
              default: { get_property: [ cloudify.nodes.ServiceInstaller, config,  service_name ] }
              description: >
                Name of the service to restart
            node_id:
              description: >
                The node id to execute workflow on


node_types:

  ##################################################################################
  # Service Installer Type
  # A base type that can be used to install and control a service.
  # A list of packages can be supplied which will be installed in sequential order.
  # The implementation uses: "sudo service <service_name> start / stop / restart"
  # to control the service operation
  ##################################################################################

  cloudify.nodes.ServiceInstaller:
    derived_from: cloudify.nodes.SoftwareComponent
    properties:
      service_name:
        default: 'Service_Node'
      version:
        default: 1
      config:
        default: None
#          # list of packages, RPM or DEB files to install
#          package_list:
#          # customer repo to add to list
#          custom_repo:
#              # yum repository entry
#              yum:
#              apt:
#                # apt key server to add
#                key_server:
#                # add command
#                list_file:
#          # the name that will be used to start / stop this service
#          service_name:
#            default: { get_property: [ SELF,  name ] }
#            description: >
#              Name of the service to manage
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: package_installer.package_installer_plugin.tasks.install_packages
          inputs:
            config:
              default: { get_property: [ SELF,  config ] }
              description: >
                The service configuration
        start:
          implementation: package_installer.package_installer_plugin.service_tasks.start_service
          inputs:
            service_name:
              default: { get_property: [ SELF,  service_name ] }
              description: >
                The service name
        stop:
          implementation: package_installer.package_installer_plugin.service_tasks.stop_service
          inputs:
            service_name:
              default: { get_property: [ SELF,  service_name ] }
              description: >
                The service name

      ##################################################################################
      # Service Command mappings
      ##################################################################################

      service.commands:
        start_service:
            implementation: package_installer.package_installer_plugin.service_tasks.start_service
        stop_service:
            implementation: package_installer.package_installer_plugin.service_tasks.stop_service
        restart_service:
            implementation: package_installer.package_installer_plugin.service_tasks.restart_service

      ##################################################################################
      # Package Command mappings
      ##################################################################################

      package.commands:
        start_service:
            implementation: package_installer.package_installer_plugin.tasks.install_packages
        stop_service:
            implementation: package_installer.package_installer_plugin.tasks.remove_packages
        restart_service:
            implementation: package_installer.package_installer_plugin.tasks.reinstall_packages


##################################################################################
# Service Types
##################################################################################

 ##################################################################################
 # Tomcat Server Type
 # A Tomcat server type that can be used to install and control a tomcat instance.
 # The implementation uses: "sudo service <service_name> start / stop / restart"
 # to control the service operation
 ##################################################################################

  cloudify.nodes.TomcatServer:
    derived_from: cloudify.nodes.ServiceInstaller
    properties:
      service_name:
        default: 'tomcat'
      version:
        default: 7
      config:
        default:
          package_list:
            - 'openjdk-7-jdk'
            - 'tomcat7'

 ##################################################################################
 # Elasticsearch Type
 # Elasticsearch type that can be used to install and control an Elasticsearch node.
 # The implementation uses: "sudo service <service_name> start / stop / restart"
 # to control the service operation
 ##################################################################################

  cloudify.nodes.Elasticsearch:
    derived_from: cloudify.nodes.ServiceInstaller
    properties:
      service_name:
        default: 'elasticsearch'
      version:
        default: '1.7.1'
      config:
        default:
          package_list:
            # Install Java
            - 'openjdk-7-jdk'
            # Install Elasticsearch from URL
            - 'https://download.elastic.co/elasticsearch/elasticsearch/elasticsearch-1.7.1.noarch.rpm'

  ##################################################################################
  # MongoDB Type
  # MongoDB type that can be used to install and control an MongoDB node.
  # The implementation uses: "sudo service <service_name> start / stop / restart"
  # to control the service operation
  ##################################################################################

  cloudify.nodes.MongoDB:
    derived_from: cloudify.nodes.ServiceInstaller
    properties:
      service_name:
        default: 'mongod'
      version:
        default: '3.0'
      config:
        default:
          custom_repo:
            name: 'mongodb-org-3.0'
            yum:
              name: 'mongodb-org-3.0'
              entry: '[mongodb-org-3.0]
                      name=MongoDB Repository
                      baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.0/x86_64/
                      gpgcheck=0
                      enabled=1'
            apt:
              key_server: 'hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10'
              entry: 'deb http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.0 multiverse'
          package_list:
            - 'mongodb-org'

 ##################################################################################
 # Postgres Type
 # Postgres type that can be used to install and control a Postgres node.
 # The implementation uses: "sudo service <service_name> start / stop / restart"
 # to control the service operation
 ##################################################################################

  cloudify.nodes.Postgres:
    derived_from: cloudify.nodes.ServiceInstaller
    properties:
      service_name:
        default: 'postgres'
      version:
        default: '9.4'
      config:
        default:
          package_list:
            - 'postgresql-9.4'

##################################################################################
# Application Types
##################################################################################

  ##################################################################################
  # Application Installer Type
  # TODO: Implementation
  ##################################################################################

  cloudify.nodes.AppInstaller:
    derived_from: cloudify.nodes.ApplicationModule
    properties:
      name:
        default: 'Application Node'
      version:
        default: '1.0'
      package_list:
        default: None
        description: >
          Provide a list of packages, RPM or DEB files to install
      app_server:
        description: >
          Name of the application server hosting this app
      application_binary:
        description: >
          The application binary to deploy


  ##################################################################################
  # Tomcat Application Type
  # TODO: Implementation
  ##################################################################################

  cloudify.nodes.TomcatApplication:
    derived_from: cloudify.nodes.AppInstaller
    properties:
      name:
        default: 'Application'
      version:
        default: '1.0'
      app_server:
        default: 'tomcat'
      application_binary:
        description: >
          WAR file to deploy


relationships:
  service.contained_in:
    derived_from: cloudify.relationships.contained_in
    properties:
      service_name:
        default: 'service'
    target_interfaces:
      cloudify.interfaces.relationship_lifecycle:
        postconfigure:
          implementation: package_installer.package_installer_plugin.service_relationships.contained_in
          inputs:
            service_name:
              default: { get_property: [ SELF,  service_name ] }
              description: >
                Name of the service to stop