##################################################################################
# Cloudify Package Installer Plugin Types
# Author: kemi
##################################################################################
tosca_definitions_version: cloudify_dsl_1_1

node_types:

##################################################################################
# Service Types
##################################################################################

##################################################################################
# Simple Java Type
# Java type that can be used to install and control Java on a provisioned node.
##################################################################################

  cloudify.nodes.Java:
    derived_from: cloudify.nodes.PackageInstaller
    properties:
      service_name:
        default: 'java'
      version:
        default: '7'
      config:
        default:
          package_list:
            # Install Java
            - { concat: [ 'openjdk-',  { get_property: [ SELF, version ] }, '-jdk' ]}

##################################################################################
# Graphana Type
# Graphana type that can be used to install and control a Graphana node.
# The implementation uses: "sudo service <service_name> start / stop / restart"
# to control the service operation
##################################################################################

  cloudify.nodes.Graphana:
    derived_from: cloudify.nodes.ServiceInstaller
    properties:
      service_name:
        default: 'grafana-server'
      version:
        default: '2.1.3'
      config:
        default:
          package_list:
            - 'libfontconfig'
            - 'adduser'
            - 'https://grafanarel.s3.amazonaws.com/builds/grafana_2.1.3_amd64.deb'

##################################################################################
# Graphana Type
# Graphana type that can be used to install and control a Graphana node.
# The implementation uses: "sudo service <service_name> start / stop / restart"
# to control the service operation
##################################################################################

  cloudify.nodes.Kibana:
    derived_from: cloudify.nodes.ServiceInstaller
    properties:
      service_name:
        default: 'grafana-server'
      version:
        default: '2.1.3'
      config:
        default:
          package_list:
            - 'libfontconfig'
            - 'adduser'
            - 'https://grafanarel.s3.amazonaws.com/builds/grafana_2.1.3_amd64.deb'

##################################################################################
# Postgres Type
# Postgres type that can be used to install and control a Postgres node.
# The implementation uses: "sudo service <service_name> start / stop / restart"
# to control the service operation
##################################################################################

  cloudify.nodes.Postgres:
    derived_from: cloudify.nodes.ServiceInstaller
    properties:
      service_name:
        default: 'postgres'
      version:
        default: '9.4'
      config:
        default:
          package_list:
            - 'postgresql-9.4'

##################################################################################
# MySQL Server Type
# MySQL Server type that can be used to install and control a MySQL node.
# The implementation uses: "sudo service <service_name> start / stop / restart"
# to control the service operation
##################################################################################

  cloudify.nodes.MySQLServer:
    derived_from: cloudify.nodes.ServiceInstaller
    properties:
      service_name:
        default: 'mysql'
      version:
        default: '5.5'
      config:
        default:
          package_list:
            - 'mysql-server'

##################################################################################
# Redis Type
# Redis type that can be used to install and control a Redis node.
# The implementation uses: "sudo service <service_name> start / stop / restart"
# to control the service operation
##################################################################################

  cloudify.nodes.Redis:
    derived_from: cloudify.nodes.ServiceInstaller
    properties:
      service_name:
        default: 'redis-server'
      version:
        default: '3.0.3'
      config:
        default:
          package_list:
            - 'redis-server'

##################################################################################
# NodeJS Server Type
# NodeJS Server type that can be used to install and control a NodeJS instance.
# The implementation uses: "sudo service <service_name> start / stop / restart"
# to control the service operation
##################################################################################

  cloudify.nodes.NodeJSServer:
    derived_from: cloudify.nodes.ServiceInstaller
    properties:
      service_name:
        default: 'nodejs'
      version:
        default: '0.12.7'
      config:
        default:
          package_list:
            - 'nodejs'

##################################################################################
# InfluxDB Type
# InfluxDB type that can be used to install and control an InfluxDB node.
# The implementation uses: "sudo service <service_name> start / stop / restart"
# to control the service operation
##################################################################################

  cloudify.nodes.InfluxDB:
    derived_from: cloudify.nodes.ServiceInstaller
    properties:
      service_name:
        default: 'influxdb'
      version:
        default: '0.9.2'
      influx_config:
        default:
          admin_port: 8083
          api_port: 8086
          external_config_file:
      config:
        default:
          package_list:
            - { concat: [ 'http://influxdb.s3.amazonaws.com/influxdb_', { get_property: [ SELF, version ] }, '_amd64.deb'] }


###################################################################################
## Application Types
###################################################################################
#
#  ##################################################################################
#  # Application Installer Type
#  # TODO: Implementation
#  ##################################################################################
#
#  cloudify.nodes.AppInstaller:
#    derived_from: cloudify.nodes.ApplicationModule
#    properties:
#      name:
#        default: 'Application Node'
#      version:
#        default: '1.0'
#      package_list:
#        default: None
#        description: >
#          Provide a list of packages, RPM or DEB files to install
#      app_server:
#        description: >
#          Name of the application server hosting this app
#      application_binary:
#        description: >
#          The application binary to deploy
#
#  ###########################################################
#  # Nodecellar application.
#  #
#  # This is the actual application source files.
#  # configurable properties:
#  #   - port
#  #   - application url
#  #   - startup script
#  ###########################################################
#
#  cloudify.nodes.NodeJSApplication:
#    derived_from: cloudify.nodes.ApplicationModule
#    properties:
#      port:
#        description: Web application port
#        type: integer
#      application_url:
#        description: >
#          URL to an archive containing the application source.
#          The archive must contain one top level directory.
#        default: https://github.com/cloudify-cosmo/nodecellar/archive/master.tar.gz
#      startup_script:
#        description: >
#          This script will be used to start the nodejs application.
#          The path is relative to the top level single directory inside
#          the archive
#        type: string
#        default: server.js
#    interfaces:
#      cloudify.interfaces.lifecycle:
#        configure: scripts/nodecellar/install-nodecellar-app.sh
#        start: scripts/nodecellar/start-nodecellar-app.sh
#        stop: scripts/nodecellar/stop-nodecellar-app.sh
#
#relationships:
#  service.contained_in:
#    derived_from: cloudify.relationships.contained_in
#    properties:
#      service_name:
#        default: 'service'
#    target_interfaces:
#      cloudify.interfaces.relationship_lifecycle:
#        postconfigure:
#          implementation: package_installer.package_installer_plugin.service_relationships.contained_in
#          inputs:
#            service_name:
#              default: { get_property: [ SELF,  service_name ] }
#              description: >
#                Name of the service to stop